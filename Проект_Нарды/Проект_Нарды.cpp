#include "stdafx.h"
#include <iostream>
#include <string>
#include <conio.h>
#include <ctime>
using namespace std;

string Field[25];  //Доска для игры,выполненная в виде массива 

void Rules() {
	system("cls");
	cout << "     ---Правила---\n";
	cout << "-Игроки ходят по очереди, передвигая свои фишки против часовой стрелки.\n\n-Перед каждым ходом игрок бросает две кости. Выпавшие очки определяют возможные ходы.\n\n-За один ход делается от одного до четырёх передвижений шашки. В каждом из них игрок может передвинуть любую свою шашку на такое количество пунктов, которое выпало на одной из костей. Например, если выпало 2 и 4 очка, игрок может за этот ход передвинуть одну (любую) из шашек на 2 пункта, другую — на 4 пункта, либо передвинуть одну шашку сначала на 2, затем — на 4 пункта (или, наоборот, сначала на 4 потом на 2).\n\n-Если на обеих костях выпадает одинаковое число очков (дубль), то выпавшие очки удваиваются, и игрок получает возможность сделать 4 перемещения.\n\n-Каждое перемещение шашки должно делаться на полное количество очков, выпавшее на кости (если выпало 4 очка, то пойти шашкой на 1, 2 или 3 пункта нельзя — можно только на полные 4).\n\n-Игрок может ставить свои фишки только в свободные ячейки или в ячейки, занятые фишками этого же игрока.\n\n-Если разрешённых перемещений для выпавшей комбинации очков нет, игрок пропускает ход. Но если возможность сделать хотя бы один ход есть, игрок не может отказаться от неё, даже если данный ход ему невыгоден.\n\n-Когда все шашки игрока в процессе движения по доске попадают в свой дом, следующими ходами игрок может начать выставлять их за доску(out). Шашка может быть выставлена за доску, когда номер пункта, на котором она стоит, равен числу очков, выпавших на одной из костей (то есть шашку, стоящую на крайнем пункте, можно выставлять, если выпала единица, на втором от края — если выпала двойка). Если все шашки в доме находятся ближе к краю доски, чем выпавшее число очков, то может выставляться за доску шашка из пункта с наибольшим номером.\n\n-Выигрывает тот, кто первым выставил все свои шашки за борт.\n\n";
	_getch();
}

void Field_Creation() {  //Создание игровой доски
	Field[0] = "-------------------------------------------------";
	Field[24] = Field[0];
	Field[1] = "|   |   |   |   |   |   |   |   |   |   |   |   |";
	Field[23] = Field[22] = Field[2] = Field[1];
	for (int i = 3; i <= 21; i++) {
		Field[i] = "|                       |                       |";
	}
}

void Field_Display() {     //Вывод поля на экран
	cout << " 12  11  10   9   8   7   6   5   4   3   2   1  " << endl;
	for (int i = 0; i < 25; i++) {
		cout << Field[i] << endl;
	}
	cout << "  13  14  15  16  17  18  19  20  21  22  23  24 " << endl;
}

int First_Step() {    //Выбор,кто ходит первым
	srand(clock());
	int Random_Choice = rand() % 2 + 1;
	return Random_Choice;
}

int Throw_Block() {  //Имитация броска кубиков
	srand(clock());
	return (rand() % 6 + 1);
}

void Put_Chip_to_Position(int position, int place, char chip) { //Функция для выставления фишек на начальные позиции
	if (position <= 12) {
		Field[place][Field[0].size() - 4 * position + 1] = chip;
	}
	else {
		Field[24 - place][4 * (position % 12) - 2] = chip;
	}
}



int main()
{
	setlocale(LC_ALL, "rus");
	Field_Creation();
	Field_Display();
	system("pause");
    return 0;
}

